# The generating script for the test data is on obelix.biozentrum.uni-wuerzburg.de:/projects/drifters/20120627-random-blinking-drift/tracked-pruned.txt
# This python script gives 25 beads with the X uncertainties 3.0 .. 5.4, which gives a uncertainty
# of the mean for the unpruned file of sqrt( dot(uncertainty,uncertainty) ) / 25 = 0.85. The pruning
# removed 0.9 of the localizations, so the resulting efficiency is a statistical ensemble.
# For Y, the target efficiency is sqrt( 10 + 9.8 + ... + 5.2 ) / 25 = 1.55
# For Z, the target efficiency is 50 / sqrt(25) = 10.

begin_test_suite
set_job_replay_mode
set timeout 100

set_input_file "${testcase_target}random-drift.txt"

send "in Car in Output in EngineOutput in ChooseTransmission in value set NonlinearDrift\n"
send "in Car in Output in EngineOutput in Output0 in NonlinearDrift in ToFile in value set ${tmpdir_target}drift.txt\n"

dstorm_attach
set test "Drift estimation runs without errors"
send "in Car in Run in value set 1\n"
set job [get_job_number]
expect {
    -re "remove $job" { pass "$test"; }
}

set test "Drift estimation gives correct residual variance"
spawn cat "${tmpdir_host}drift.txt"

set n 0
set mean_x 0
set M2_x 0
set mean_y 0
set M2_y 0
set mean_z 0
set M2_z 0
expect {
    -re "(\[0-9\]*) (\[0-9.-\]*) (\[0-9.-\]*) (\[0-9.-\]*)\r*\n" { 
        set n [expr $n + 1]
        set drift [expr 5 * sin( $expect_out(1,string) / 50.0 ) + 400.0 * (sin( $expect_out(1,string) / 1000.0 )) ]

        set x_x [expr $expect_out(2,string) - $drift]
        set delta_x [expr $x_x - $mean_x]
        set mean_x [expr $mean_x + $delta_x / $n]
        set M2_x [expr $M2_x + $delta_x * ($x_x - $mean_x)]

        set x_y [expr $expect_out(3,string) - $drift]
        set delta_y [expr $x_y - $mean_y]
        set mean_y [expr $mean_y + $delta_y / $n]
        set M2_y [expr $M2_y + $delta_y * ($x_y - $mean_y)]

        set x_z [expr $expect_out(4,string) - $drift]
        set delta_z [expr $x_z - $mean_z]
        set mean_z [expr $mean_z + $delta_z / $n]
        set M2_z [expr $M2_z + $delta_z * ($x_z - $mean_z)]

        exp_continue
    }
    eof {
        set stddev_x [expr sqrt( $M2_x / ($n-1) )]
        set stddev_y [expr sqrt( $M2_y / ($n-1) )]
        set stddev_z [expr sqrt( $M2_z / ($n-1) )]
        pass_if [expr abs($stddev_x - 1.9) < 0.1 && (abs($mean_x) < 3*$stddev_x)] "$test in x"
        pass_if [expr abs($stddev_y - 3.9) < 0.1 && (abs($mean_y) < 3*$stddev_y)] "$test in y"
        pass_if [expr abs($stddev_z - 110 ) < 1 && (abs($mean_z) < 3*$stddev_z)] "$test in z"
    }
}

wait
global dstorm_spawn_id
global spawn_id
set spawn_id $dstorm_spawn_id

end_test_suite
