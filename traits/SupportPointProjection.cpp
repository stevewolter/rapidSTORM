#include <queue>
#include <set>
#include <fstream>

#include <simparm/Eigen_decl.h>
#include <simparm/BoostUnits.h>
#include <simparm/Eigen.h>
#include <simparm/FileEntry.h>
#include <simparm/Object.h>

#include <boost/array.hpp>
#include <boost/foreach.hpp>
#include <boost/spirit/include/phoenix_container.hpp>
#include <boost/spirit/include/phoenix_core.hpp>
#include <boost/spirit/include/phoenix_operator.hpp>
#include <boost/spirit/include/qi.hpp>
#include <boost/spirit/include/support_istream_iterator.hpp>
#include <boost/units/cmath.hpp>
#include <boost/units/Eigen/Array>
#include <boost/units/systems/camera/resolution.hpp>

#include <Eigen/Dense>
#include <Eigen/Geometry>

#include "image/constructors.h"
#include "image/corners.h"
#include "image/MetaInfo.h"
#include "image/Image.h"
#include "UnitEntries/PixelSize.h"

#include "traits/optics.h"
#include "traits/ProjectionConfig.h"
#include "traits/ProjectionFactory.h"
#include "traits/Projection.h"

#include "debug.h"
#include "dejagnu.h"

namespace dStorm {
namespace traits {

using namespace boost::units;
namespace qi = boost::spirit::qi;
namespace phoenix = boost::phoenix;

class SupportPointProjection : public Projection {
    class PointOrdering;

    typedef dStorm::Image< SamplePosition, 2 > Map;
    Eigen::Array2f higher_density;
    Map high_density_map, forward_map;
    Eigen::Affine2f approx_reverse;

    SamplePosition point_in_sample_space_
        ( const SubpixelImagePosition& pos ) const;
    SamplePosition pixel_in_sample_space_
        ( const ImagePosition& pos ) const;
    std::vector< MappedPoint >
        cut_region_of_interest_( const ROISpecification& ) const;
    Bounds get_region_of_interest_( const ROISpecification& ) const;
    ImagePosition nearest_point_in_image_space_
        ( const SamplePosition& pos ) const;
    SubpixelImagePosition point_in_image_space_
        ( const SamplePosition& pos ) const 
        { throw std::runtime_error("The support point projection does not support reverse projection"); }

    void compute_forward_map();
    void approximate_reverse_transformation();

  public:
    SupportPointProjection( 
        units::quantity<units::camera::resolution> x, 
        units::quantity<units::camera::resolution> y, 
        units::quantity<units::camera::resolution> map_x, 
        units::quantity<units::camera::resolution> map_y,
        std::istream& file_map );

    std::vector< MappedPoint >
        cut_region_of_interest_naively( const ROISpecification& ) const;
};

class SupportPointProjectionFactory
: public ProjectionFactory
{
    std::string micro_alignment_file;
    units::quantity<units::camera::resolution> file_resolution[2];

    Projection* get_projection_( const image::MetaInfo<2>& mi ) const 
    {
        if ( micro_alignment_file == "" ) 
            throw std::runtime_error("An alignment image file must be given "
                                     "for support point alignment");
        std::ifstream is( micro_alignment_file.c_str(), std::ios::in );
        return new SupportPointProjection(
            mi.resolution(0).in_dpm(), 
            mi.resolution(1).in_dpm(), 
            file_resolution[0],
            file_resolution[1],
            is );
    }

  public:
    SupportPointProjectionFactory( 
        std::string micro_alignment_file,
        units::quantity<units::camera::resolution> map_x, 
        units::quantity<units::camera::resolution> map_y )
    : micro_alignment_file(micro_alignment_file) 
    {
        file_resolution[0] = map_x;
        file_resolution[1] = map_y;
    }
};

class SupportPointProjectionConfig
: public ProjectionConfig
{
    simparm::FileEntry micro_alignment;
    typedef Eigen::Matrix< boost::units::quantity< nanometer_pixel_size, float >,
                           2, 1, Eigen::DontAlign > PixelSize;
    simparm::Entry<PixelSize> resolution;

    ProjectionFactory* get_projection_factory_() const { 
        return new SupportPointProjectionFactory(
            micro_alignment(),
            quantity<camera::resolution>((1E9f * si::nanometre / si::metre) / (resolution().x())),
            quantity<camera::resolution>(1E9f * si::nanometre / si::metre / (resolution().y()))
        );
    }

    SupportPointProjectionConfig* clone_() const 
        { return new SupportPointProjectionConfig(*this); }

    void attach_ui( simparm::NodeHandle at ) {
        simparm::NodeHandle r = attach_parent(at);
        micro_alignment.attach_ui( r );
        resolution.attach_ui( r ); 
    }

  public:
    SupportPointProjectionConfig() 
    : ProjectionConfig("SupportPointProjection"),
      micro_alignment("SupportPointAlignmentFile", ""),
      resolution( "SupportPointResolution", PixelSize::Constant(10.0f * si::nanometre / camera::pixel) )
        {}
};

std::auto_ptr<ProjectionConfig> make_support_point_projection_config() {
    return std::auto_ptr<ProjectionConfig>( new SupportPointProjectionConfig() );
}


struct SupportPointProjection::PointOrdering
: public std::binary_function< ImagePosition, ImagePosition, bool >
{
    bool operator()( const ImagePosition& a, const ImagePosition& b ) {
        for (int i = 0; i < a.rows(); ++i) {
            if ( a[i] < b[i] )
                return true;
            else if ( a[i] > b[i] )
                return false;
        }
        return false;
    }
};

template <typename Expr>
bool parse( std::istream& in, const Expr& expr )
{
    in.unsetf(std::ios::skipws);
    return qi::phrase_parse( 
        boost::spirit::istream_iterator( in ),
        boost::spirit::istream_iterator(),
        expr,
        qi::space );
}

SupportPointProjection::SupportPointProjection( 
        units::quantity<units::camera::resolution> x, 
        units::quantity<units::camera::resolution> y, 
        units::quantity<units::camera::resolution> map_x, 
        units::quantity<units::camera::resolution> map_y,
        std::istream& file_map )
{
    higher_density.x() = x / map_x;
    higher_density.y() = y / map_y;

    int width = 0, height = 0;
    std::vector<double> xs, ys;
    bool file_ok =
        parse( file_map, 
            qi::lit("Width=") >> qi::int_[ phoenix::ref(width) = qi::_1 ] 
                >> qi::lit("Height=") >> qi::int_[ phoenix::ref(height) = qi::_1 ] 
                >> qi::lit("X") >> qi::lit("Trans") >> "-----------------------------------"
                >> *(qi::double_[phoenix::push_back(phoenix::ref(xs), qi::_1)]) 
                >> qi::lit("Y") >> qi::lit("Trans") >> "-----------------------------------"
                >> *(qi::double_[phoenix::push_back(phoenix::ref(ys), qi::_1)]) 
                );
    if ( ! file_ok ) 
        throw std::runtime_error("Cannot parse file as a bUnwarpJ raw transformation");
    if ( int(xs.size()) != width * height )
        throw std::runtime_error("Too few X elements");
    if ( int(ys.size()) != width * height )
        throw std::runtime_error("Too few Y elements");

    dStorm::ImageTypes<2>::Size sz;
    sz.x() = width * camera::pixel;
    sz.y() = height * camera::pixel;

    std::vector<double>::iterator vx = xs.begin(), vy = ys.begin();
    high_density_map = Map(sz);
    for ( Map::iterator i = high_density_map.begin(); i != high_density_map.end(); ++i ) {
        i->x() = *(vx++) * camera::pixel / map_x;
        i->y() = *(vy++) * camera::pixel / map_y;
    }

    compute_forward_map();
    approximate_reverse_transformation();
}

void SupportPointProjection::compute_forward_map() {
    dStorm::ImageTypes<2>::Size im_sz;
    for (int j = 0; j < 2; ++j)
        im_sz[j] = ceil( quantity< camera::length, float >(high_density_map.sizes()[j]) * higher_density[j] );
    forward_map = Map(im_sz);
    for ( Map::iterator i = forward_map.begin(); i != forward_map.end(); ++i )
        *i = point_in_sample_space_( i.position().cast< SubpixelImagePosition::Scalar >() );
}

void SupportPointProjection::approximate_reverse_transformation() {
    const float scale = 1E-7;
    /* This matrix has 3 columns, but cannot be given statically because
     * thin U/V computation is only available on dynamic sizes. */
    Eigen::MatrixXf inputs( forward_map.size_in_pixels(), 3 );
    Eigen::VectorXf x_outputs( forward_map.size_in_pixels() ), y_outputs( x_outputs );
    int c = 0;
    for ( Map::const_iterator i = forward_map.begin(); i != forward_map.end(); ++i )
    {
        /* Sample position is scaled into sane dimensions to enhance
         * numerical stability. */
        inputs( c, 0 ) = i->x() / (scale * si::meter);
        inputs( c, 1 ) = i->y() / (scale * si::meter);
        x_outputs[c] = i.position().x() / camera::pixel;
        y_outputs[c] = i.position().y() / camera::pixel;
        ++c;
    }
    inputs.col(2).fill(1);
    /* The Jacobi SVD solves the least-squares problem, directly giving the
     * coefficients of a linear transformation. */
    Eigen::JacobiSVD< Eigen::MatrixXf > svd(inputs, 
                    Eigen::ComputeThinU | Eigen::ComputeThinV);

    approx_reverse = Eigen::Affine2f::Identity();
    approx_reverse.matrix().row(0) = svd.solve( x_outputs ).transpose();
    approx_reverse.matrix().row(1) = svd.solve( y_outputs ).transpose();
    approx_reverse.matrix().topLeftCorner<2,2>() /= scale;
}

Projection::SamplePosition 
SupportPointProjection::point_in_sample_space_
    ( const SubpixelImagePosition& pos ) const
{
    SamplePosition rv = SamplePosition::Constant( 0.0f * si::meter );
    SubpixelImagePosition p = from_value< camera::length >
        (value(pos).array() / higher_density);
    for (int dx = 0; dx <= 1; ++dx)
        for (int dy = 0; dy <= 1; ++dy)
        {
            ImagePosition r = floor( p ).cast<ImagePosition::Scalar>(); 
            r.x() += dx * camera::pixel;
            r.y() += dy * camera::pixel;
            SubpixelImagePosition diff = 
                p - r.cast<SubpixelImagePosition::Scalar>();
            float f = std::abs( (1 - value(diff).array().abs()).prod() );
            /* Look up the value of the nearest existing pixel, but use the
             * unmodified weight to assure the sum is 1. */
            ImagePosition l = r.array().max( lower_corner( high_density_map ) )
                 .min( upper_corner( high_density_map ) );
            rv += from_value< si::length >(value( high_density_map( l ) ) * f);
        }
    return rv;
}

Projection::SamplePosition 
SupportPointProjection::pixel_in_sample_space_
    ( const ImagePosition& pos ) const
{
    return forward_map( pos );
}

std::vector< Projection::MappedPoint >
SupportPointProjection::cut_region_of_interest_naively( const ROISpecification& roi ) const
{
    std::vector< Projection::MappedPoint > rv;
    for ( Map::const_iterator i = forward_map.begin(); i != forward_map.end(); ++i )
    {
        if ( roi.contains( *i ) ) 
            rv.push_back( Projection::MappedPoint( i.position(), *i ) );
    }
    return rv;
}

std::vector< Projection::MappedPoint >
SupportPointProjection::cut_region_of_interest_( const ROISpecification& roi ) const
{
    std::vector< Projection::MappedPoint > rv;
    boost::array<ImagePosition,4> neighbours;
    for (int i = 0; i < 4; ++i) 
        neighbours[i] = ImagePosition::Constant(0 * camera::pixel);
    neighbours[0].x() = 1 * camera::pixel;
    neighbours[1].x() = -1 * camera::pixel;
    neighbours[2].y() = 1 * camera::pixel;
    neighbours[3].y() = -1 * camera::pixel;

    std::set< ImagePosition, PointOrdering > past;
    std::queue< ImagePosition > future;
    ImagePosition central = nearest_point_in_image_space( roi.center );
    future.push( central );
    past.insert( central );

    while ( ! future.empty() ) {
        const ImagePosition& present = future.front();
        DEBUG("Considering " << present.transpose());
        SamplePosition p = forward_map( present );
        if ( roi.contains( p ) ) {
            DEBUG(present.transpose() << " is in the ROI");
            rv.push_back( MappedPoint( present, p ) );
            BOOST_FOREACH( const ImagePosition& d, neighbours ) {
                ImagePosition o = present + d;
                if ( forward_map.contains(o) && past.find( o ) == past.end() ) {
                    DEBUG("Adding " << o.transpose() << " to work list");
                    past.insert( o );
                    future.push( o );
                }
            }
        }
        future.pop();
    }

    assert( rv.size() == cut_region_of_interest_naively(roi).size() );
    return rv;
}

SupportPointProjection::Bounds
SupportPointProjection::get_region_of_interest_( const ROISpecification& roi ) const
{
    ImagePosition lower = nearest_point_in_image_space( roi.center - roi.width ),
                  upper = nearest_point_in_image_space( roi.center + roi.width );
    
    return SupportPointProjection::Bounds( lower, upper );
}

SupportPointProjection::ImagePosition
SupportPointProjection::nearest_point_in_image_space_
    ( const SamplePosition& pos ) const
{
    /* First compute a good estimate with the linear approximation transform. */
    ImagePosition best_estimate = 
        from_value<camera::length>( round(
            approx_reverse * value(pos).cast<float>()
        ).cast<int>() );
    for (int i = 0; i < 2; ++i) {
        best_estimate[i] = std::max(0 * camera::pixel, best_estimate[i]);
        best_estimate[i] = std::min(forward_map.sizes()[i] - 1 * camera::pixel,
                                    best_estimate[i]);
    }
    float best_distance = 
        value( forward_map( best_estimate ) - pos ).squaredNorm();
    
    /* Improve the estimate with gradient descent. */
    do {
        ImagePosition new_best_estimate = best_estimate;
        for (int dx = -1; dx <= 1; ++dx)
            for (int dy = -1; dy <= 1; ++dy)
            {
                ImagePosition t = best_estimate;
                t.x() += dx * camera::pixel;
                t.y() += dy * camera::pixel;
                if (!forward_map.contains(t)) continue;
                float distance = value( forward_map( t ) - pos ).squaredNorm();
                if ( distance < best_distance ) {
                    new_best_estimate = t;
                    best_distance = distance;
                }
            }
        if ( new_best_estimate == best_estimate )
            break;
        else
            best_estimate = new_best_estimate;
    } while ( true );

    return best_estimate;
}

static const char *the_test_file = 
	"Width=27\n"
	"Height=29\n"
	"\n"
	"X Trans -----------------------------------\n"
	"-0.56763828810267 0.4318587722648496 1.4313375083887958 2.430804769004705 3.4302606514657437 4.429705253125135 5.429138671335984 6.428561003451539 7.427972346824908 8.427372798809351 9.426762456757961 10.426141418023938 11.425509779960512 12.424867639920821 13.424215095258 14.423552243325318 15.422879181475858 16.422196007062862 17.421502817439496 18.42079970995894 19.420086781974312 20.419364130838883 21.418631853905758 22.417890048528143 23.41713881205921 24.416378241852136 25.415608435260104\n"
	"-0.565904176991094 0.4335788148034105 1.4330434003515473 2.4324964289400643 3.4319379985976854 4.431368207353195 5.4307871532352525 6.43019493427267 7.42959164849411 8.428977393928394 9.428352268604172 10.4277163705502 11.427069797795273 12.426412648368082 13.425745020297322 14.425067011611823 15.424378720340224 16.423680244511324 17.422971682153854 18.422253131296547 19.421524689968084 20.420786456197288 21.42003852801283 22.419281003443466 23.418513980517936 24.417737557264974 25.416951831713316\n"
	"-0.5641784069555625 0.4352904402409485 1.4347407987545264 2.4341795184256347 3.4336066979620776 4.433022436071718 5.432426831462298 6.431819982841704 7.4312019889176835 8.430572948398135 9.429932959990792 10.429282122403489 11.428620534344095 12.427948294520387 13.427265501640143 14.426572254411262 15.425868651541471 16.42515479173865 17.424430773710604 18.423696696165145 19.42295265781004 20.422198757353186 21.421435093502346 22.42066176496534 23.419878870449995 24.419086508664126 25.418284778315545\n"
	"-0.5624608797942239 0.43699374753792075 1.4364298033209444 2.435854137951508 3.4352668508199837 4.434668041316806 5.434057808832281 6.433436252756872 7.432803472480888 8.432159567394796 9.431504636888903 10.430838780353609 11.430162097179355 12.429474686756484 13.428776648475342 14.428068081726398 15.427349085899952 16.426619760386444 17.425880204576256 18.425130517859763 19.424370799627305 20.42360114926935 21.422821666176215 22.422032449738314 23.421233599346017 24.42042521438972 25.41960739425981\n"
	"-0.5607514973052267 0.43868883565478467 1.4381105137740118 2.4375203880077745 3.436918558432471 4.4363051251245595 5.435680188160375 6.435043847616401 7.434396203568976 8.433737356094596 9.433067405269584 10.432386451170371 11.431694593873425 12.430991933455115 13.430278569991806 14.42955460356 15.428820134236016 16.428075262096325 17.427320087217332 18.426554709675443 19.42577922954701 20.424993746908537 21.424198361836368 22.423393174406932 23.42257828469664 24.421753792781903 25.420919798739135\n"
	"-0.5590501612867188 0.4403758035519971 1.4397830298369398 2.4391783690845257 3.4385619220606034 4.43793378953108 5.437294072261741 6.436642871018521 7.435980286567209 8.435306419673745 9.43462137110391 10.433925241623582 11.43321813199868 12.432500142995018 13.431771375378416 14.431031929914825 15.430281907370013 16.429521408509903 17.428750534100345 18.427969384907197 19.42717806169627 20.42637666523351 21.42556529628471 22.424744055615747 23.423913043992485 24.42307236218079 25.422222110946514\n"
	"-0.5573567735368488 0.4420547501900155 1.4414474512329392 2.4408281816718516 3.440197042965444 4.439554136572468 5.438899563951547 6.438233426561461 7.437555825860838 8.436866863308467 9.436166640362963 10.43545525848305 11.434732819127488 12.433999423754935 13.433255173824053 14.432500170793636 15.431734516122292 16.430958311268785 17.43017165769181 18.429374656850072 19.428567410202213 20.427750019207025 21.426922585323148 22.426085210009305 23.42523799472419 24.424381040926516 25.423514450074975\n"
	"-0.555671235853765 0.443725774529297 1.4431038776852207 2.4424699262598444 3.4418240224080607 4.441166268284823 5.440496766044959 6.43981561784345 7.439122925835124 8.438418792174973 9.437703319017817 10.436976608518583 11.436238762832227 12.435489884113611 13.434730074517606 14.4339594361992 15.433178071313206 16.43238608201459 17.431583570458255 18.430770638799096 19.429947389191966 20.429113923791856 21.428270344753614 22.42741675423215 23.42655325438238 24.425679947359207 25.424796935317534\n"
	"-0.5539934500356153 0.4453889755302986 1.4447524089169952 2.4441037033385933 3.443442961649517 4.4427702867042465 5.442085781357142 6.4413895484627135 7.440681690875321 8.439962311449484 9.439231513039553 10.438489398499984 11.437736070685265 12.436971632449788 13.43619618664795 14.435409836134273 15.434612683763099 16.433804832388926 17.43298638486618 18.43215744404929 19.43131811279264 20.43046849395076 21.429608690378004 22.428738804928837 23.427858940457686 24.42696919981899 25.42606968586719\n"
	"-0.5523233178805484 0.44704445215347755 1.4463931446514737 2.445729613398191 3.445053961950877 4.444366293866841 5.443666712703264 6.442955322017484 7.442232225366688 8.441497526308217 9.440751328399248 10.439993735197064 11.439224850258977 12.438444777142207 13.437653619403974 14.436851480601623 15.436038464292329 16.435214674033404 17.43438021338211 18.4335351858957 19.432679695131377 20.431813844646495 21.43093773799825 22.430051478743906 23.429155170440744 24.428248916646012 25.427332820916973\n"
	"-0.5506607411867127 0.4486923033592911 1.4480261846118674 2.447347756928727 3.446657124573207 4.445954391808704 5.445239662898491 6.44451304210599 7.443774633694478 8.443024541927388 9.442262871067982 10.44148972537963 11.440705209125738 12.439909426569612 13.439102481974558 14.438284479604015 15.43745552372124 16.43661571858964 17.435765168472564 18.434903977633347 19.434032250335292 20.433150090841828 21.43225760341625 22.43135489232192 23.43044206182218 24.42951921618039 25.42858645965989\n"
	"-0.5490056217522563 0.4503326281081962 1.4496516285213863 2.4489582344202923 3.448252550777571 4.447534682565939 5.446804734757986 6.446062812326459 7.445309020243949 8.44454346348321 9.443766247016828 10.44297747581749 11.442177254857919 12.441365689110741 13.440542883548583 14.439708943144204 15.43886397287018 16.43800807769924 17.43714136260405 18.436263932557264 19.435375892531503 20.434477347499524 21.43356840243393 22.432649162307406 23.43171973209262 24.430780216762248 25.429830721288948\n"
	"-0.5473578613753274 0.45196552536065027 1.451269576103242 2.4505611463629786 3.449840341825035 4.449107268174645 5.44836203109692 6.44760473627712 7.44683548940036 8.44605439615191 9.44526156221687 10.444457093280452 11.443641095027894 12.442813673144341 13.441974933314938 14.441124981224965 15.44026392255951 16.439391863003824 17.43850890824309 18.437615163962484 19.436710735847143 20.435795729582342 21.434870250853205 22.433934405344935 23.43298829874271 24.432032036731727 25.431065724997175\n"
	"-0.5457173618540745 0.4535910940771103 1.4528801270806448 2.4521565932468756 3.4514205989766626 4.450672250670924 5.449911654730455 6.449138917556203 7.448354145548963 8.447557445109696 9.446748922639182 10.445928684538321 11.445096837208032 12.444253487049147 13.443398740462499 14.442532703849047 15.44165548360957 16.440767186144996 17.439867917856198 18.438957785144037 19.438036894409336 20.43710535205305 21.436163264475987 22.435210738079032 23.434247879263065 24.433274794428954 25.432291589977574\n"
	"-0.5440840249866458 0.4552094332180333 1.4544833811768063 2.453744675562075 3.452993423493519 4.452229732090875 5.451453708473759 6.450665459761934 7.449865093075018 8.449052715532787 9.448228434254846 10.447392356360904 11.44654458897071 12.44568523920391 13.444814414180152 14.44393222101922 15.443038766840708 16.44213415876437 17.441218503909887 18.440291909396954 19.439354482345195 20.438406329874397 21.437447559104182 22.436478277154258 23.43549859114432 24.434508608194054 25.43350843542316\n"
	"-0.5424577525711896 0.45682064174387693 1.456079438114937 2.455325493798668 3.4545589166366697 4.453779814470601 5.4529882951419975 6.452184466492545 7.451368436363782 8.450540312597404 9.449700203034936 10.448848215518014 11.447984457888301 12.447109037987367 13.446222063656782 14.445323642738249 15.444413883073285 16.443492892503563 17.442560778870686 18.441617650016266 19.440663613781854 20.439698778009156 21.43872325053972 22.437737139215166 23.43674055187711 24.435733596367168 25.434716380526954\n"
	"-0.5408384464058542 0.45842481861509793 1.4576683976182476 2.4568991484467446 3.4561171796671792 4.455322599846201 5.4545155175503375 6.453696041346262 7.452864279800507 8.452020341479757 9.45116433495053 10.450296368779451 11.449416551533174 12.448524991778257 13.447621798081267 14.446707079008892 15.445780943127637 16.444843499004175 17.443894855205098 18.442935120297 19.44196440284643 20.44098281142009 21.4399904545845 22.43898744090629 23.43797387895206 24.436949877288416 25.43591554448195\n"
	"-0.539226008288788 0.46002206279215374 1.459250359409949 2.458465739996396 3.4576683138461126 4.456858190253778 5.456035478513944 6.4552002879213175 7.4543527277704555 8.453492907356072 9.452620935972712 10.451736922915028 11.450840977477704 12.44993320895533 13.449013726642493 14.448082639833913 15.447140057824129 16.446186089907833 17.445220845379648 18.444244433534198 19.443256963666062 20.442258545069958 21.441249287040453 22.440229298872193 23.439198689859804 24.43815756929793 25.43710604648119\n"
	"  -0.5376203400181391 0.4616124732355013 1.4608254232132525 2.4600253689377127 3.4592124204345347 4.458386687729429 5.457548280847983 6.456697309815937 7.45583388465888 8.454958115402558 9.454070112072552 10.45316998469455 11.452257843294266 12.451333797897322 13.45039795852934 14.449450435216077 15.4484913379831 16.447520776856138 17.44653886186084 18.44554570302288 19.444541410367854 20.44352609392152 21.44249986370948 22.441462829757405 23.44041510209097 24.43935679073584 25.43828800571767\n"
	" -0.536021343392056 0.46319614890559785 1.4623936887513684 2.4615781357607864 3.4607496006935103 4.459908194309257 5.459054027367623 6.458187210628351 7.457307854851037 8.456416070795436 9.455511969221137 10.454595660887826 11.45366725655523 12.452726866982976 13.451774602930694 14.450810575158146 15.449834894424903 16.448847671490704 17.447849017115207 18.44683904205808 19.445817857078943 20.444785572937548 21.443742300393502 22.442688150206497 23.441623233136195 24.44054765994228 25.439461541384407\n"
	"-0.5344289202086868 0.46477318876290064 1.4639552557475077 2.463124140955707 3.462279955884105 4.461422812029364 5.460552820888027 6.459670093956786 7.458774742732183 8.457866878710924 9.456946613389535 10.456014058264662 11.45506932483297 12.454112524591036 13.453143769035439 14.452163169662882 15.451170837969888 16.450166885453143 17.449151423609255 18.448124563934833 19.447086417926442 20.446037097080794 21.44497671289443 22.443905376863995 23.442823200486103 24.44173029525737 25.440626772674413\n"
	"-0.53284297226618 0.46634369176786666 1.4655102239248823 2.4646634850125664 3.4638035872673822 4.4629306429258495 5.462044764224364 6.461146063399474 7.460234652687579 8.459310644325235 9.458374150548833 10.457425283594864 11.456464155699859 12.455490879100243 13.45450556603245 14.453508328733047 15.45249927943841 16.451478530385074 17.4504461938095 18.44940238194817 19.448347207037486 20.447280781314024 21.446203217014187 22.44511462637446 23.444015121631324 24.442904815021247 25.44178381878071\n"
	"-0.531263401362684 0.4679077568809532 1.4670586930067009 2.4661962684214545 3.465320596104408 4.464431789034812 5.4635299601917975 6.462615222554642 7.461687689102476 8.460747472814589 9.459794686670104 10.458829443648241 11.457851856728265 12.456862038889337 13.455860103110616 14.454846162371407 15.453820329650808 16.452782717928095 17.451733440182462 18.450672609393113 19.449600338539195 20.448516740600002 21.447421928554675 22.446316015382436 23.445199114062483 24.44407133757404 25.442932798896294\n"
	"-0.5296901092963469 0.46946548306261726 1.4686007627161766 2.467722591672463 3.4668310836562477 4.465926352392357 5.465008511605495 6.464077675020518 7.463133956362133 8.462177469355204 9.461208327724428 10.460226645194604 11.459232535490571 12.458226112337064 13.457207489458826 14.456176780580721 15.455134099427442 16.45407955972383 17.453013275194657 18.451935359564704 19.45084592655869 20.44974508990149 21.44863296331782 22.44750966053247 23.44637529527023 24.44522998125588 25.4440738322142\n"
	"-0.5281229978653169 0.47101696927331643 1.4701365327765188 2.469242555255683 3.4683351511839655 4.4674144350345815 5.466480521280623 6.465533524395334 7.464573558851806 8.463600739123295 9.462615179682883 10.461616995003759 11.460606299559144 12.459583207822165 13.45854783426595 14.457500293363756 15.456440699588658 16.455369167413888 17.4542858113126 18.45319074575797 19.4520840852231 20.450965944181252 21.449836437105528 22.44869567846912 23.447543782745182 24.4463808644069 25.44520703792743\n"
	"-0.5265619688677425 0.47256231447350744 1.471666102910939 2.4707562596612043 3.469832899948626 4.468896138997587 5.467946092032347 6.466982874277314 7.466006600956752 8.46501738729508 9.464015348516545 10.463000599845506 11.461973256506354 12.46093343372338 13.459881246720878 14.458816810723272 15.457740240954804 16.456651652639874 17.455551161002806 18.454438881267937 19.45331492865954 20.452179418402046 21.451032465719717 22.44987418583692 23.448704693977973 24.447524105367226 25.446332535229\n"
	"-0.5250069241017719 0.47410161762364766 1.473189572842648 2.472263805379118 3.4713244312112947 4.470371566317476 5.469405326675833 6.468425828264691 7.467433187062228 8.466427519046775 9.465408940196497 10.464377566489663 11.46333351390458 12.462276898419452 13.461207836012491 14.460126442662034 15.459032834346235 16.457927127043412 17.4568094367318 18.455679879389642 19.454538570995144 20.45338562752664 21.45222116496231 22.451045299280423 23.449858146459228 24.448659822476984 25.447450443311922\n"
	"-0.5234577653655534 0.4756349776841942 1.4747070422948567 2.4737652928995146 3.472809846233036 4.471840819030346 5.470858328026246 6.469862489955692 7.4688534215534865 8.467831239554595 9.46679606069381 10.46574800170603 11.464687179326189 12.463613710289124 13.462527711329672 14.4614292991828 15.460318590583295 16.4591957022661 17.45806075096608 18.456913853418115 19.45575512635703 20.45458468651779 21.453402650635205 22.452209135444175 23.451004257679582 24.4497881340763 25.448560881369215\n"
	"-0.5219143944572355 0.47716249361560426 1.476218610990776 2.4752608227124866 3.474289246274916 4.473303999172301 5.472305198898756 6.471292962948547 7.470267408815791 8.469228653994762 9.468176815979568 10.467112012264419 11.46603436034356 12.464943977711137 13.463840981861306 14.46272549028834 15.46159762048634 16.46045748994956 17.459305216172183 18.45814091664839 19.456964708872327 20.455776710338263 21.454577038540332 22.453365810972738 23.452143145129668 24.45090915850533 25.44966396859389\n"
	"\n"
	"Y Trans -----------------------------------\n"
	"-7.184975691913245 -7.184980201509241 -7.184981072401399 -7.184978453275463 -7.184972352723911 -7.184962779339237 -7.184949741713922 -7.184933248440508 -7.184913308111447 -7.184889929319276 -7.184863120656466 -7.184832890715505 -7.184799248088929 -7.18476220136921 -7.18472175914885 -7.184677930020342 -7.184630722576188 -7.184580145408873 -7.18452620711092 -7.184468916274788 -7.184408281493013 -7.184344311358082 -7.184277014462474 -7.184206399398732 -7.184132474759288 -7.184055249136684 -7.183974731123392\n"
	"-6.184152188920656 -6.184158895183842 -6.18416198373037 -6.184161583358851 -6.1841577026433185 -6.184150350157793 -6.184139534476358 -6.184125264173083 -6.184107547821988 -6.1840863939971555 -6.184061811272635 -6.184033808222445 -6.184002393420677 -6.183967575441379 -6.183929362858599 -6.183887764246386 -6.183842788178794 -6.1837944432299 -6.183742737973716 -6.18368768098432 -6.18362928083576 -6.183567546102118 -6.183502485357387 -6.1834341071756995 -6.183362420131047 -6.183287432797485 -6.18320915374909\n"
	"-5.18333547958445 -5.183344398718077 -5.183349721162273 -5.183351555828558 -5.183349911272295 -5.1833447960488215 -5.183336218713528 -5.183324187821803 -5.183308711929001 -5.183289799590497 -5.183267459361673 -5.183241699797875 -5.183212529454508 -5.1831799568869314 -5.183143990650507 -5.183104639300616 -5.1830619113926275 -5.183015815481916 -5.182966360123842 -5.1829135538737745 -5.182857405287109 -5.182797922919221 -5.1827351153254355 -5.182668991061199 -5.182599558681808 -5.182526826742659 -5.182450803799128\n"
	"-4.18252553661663 -4.18253668474604 -4.182544257253035 -4.182548343162097 -4.1825489510096645 -4.182546089332149 -4.182539766666032 -4.182529991547774 -4.182516772513836 -4.18250011810067 -4.182480036844709 -4.182456537282405 -4.182429627950249 -4.182399317384672 -4.182365614122112 -4.182328526699067 -4.182288063651953 -4.182244233517217 -4.182197044831341 -4.182146506130756 -4.182092625951952 -4.182035412831354 -4.181974875305407 -4.181911021910615 -4.181843861183374 -4.181773401660145 -4.181699651877409\n"
	"-3.181722332729187 -3.181735725901838 -3.181745564558618 -3.1817519178369906 -3.181754794254232 -3.181754202327639 -3.1817501505745085 -3.1817426475121806 -3.1817317016579167 -3.1817173215290495 -3.181699515642862 -3.1816782925166507 -3.181653660667749 -3.181625628613432 -3.181594204871004 -3.181559397957791 -3.1815212163910616 -3.181479668688141 -3.181434763366319 -3.181386508942893 -3.1813349139351814 -3.1812799868604955 -3.1812217362361253 -3.181160170579375 -3.181095298407527 -3.1810271282379077 -3.1809556685878064\n"
	"-2.1809258406340817 -2.180941494819521 -2.1809536156349125 -2.180962252330694 -2.180967413404801 -2.1809691073551107 -2.1809673426795513 -2.1809621278760716 -2.180953471442578 -2.180941381876977 -2.1809258676772103 -2.180906937341149 -2.1808845993667774 -2.1808588622519665 -2.180829734494665 -2.18079722459278 -2.1807613410442173 -2.1807220923469046 -2.18067948699877 -2.1806335334977263 -2.1805842403416946 -2.1805316160285884 -2.180475669056328 -2.1804164079228627 -2.180353841126056 -2.18028797716385 -2.1802188245341654\n"
	"-1.1801360330433397 -1.1801539641332823 -1.1801683830379162 -1.1801793191207963 -1.1801867808602182 -1.180190776734463 -1.1801913152218333 -1.180188404800667 -1.1801820539492525 -1.1801722711459064 -1.180159064868917 -1.18014244359658 -1.1801224158072472 -1.180098989979193 -1.1800721745907268 -1.180041978120144 -1.180008409045783 -1.1799714758459245 -1.1799311869988642 -1.1798875509829188 -1.179840576276412 -1.1797902713576534 -1.179736644704903 -1.1796797047965342 -1.1796194601107857 -1.1795559191259812 -1.1794890903204518\n"
	"-0.17935288266892258 -0.17937310647713645 -0.1793898393235338 -0.17940309068477234 -0.17941286901926645 -0.1794191827854945 -0.17942204044192067 -0.1794214504470446 -0.17941742125928783 -0.17940996133713583 -0.17939907913904563 -0.17938478312348138 -0.17936708174892857 -0.17934598347384423 -0.1793214967566712 -0.17929363005590204 -0.17926239182999382 -0.17922779053739646 -0.17918983463660254 -0.1791485325860407 -0.17910389284421768 -0.17905592386959768 -0.17900463412058798 -0.1789500320557451 -0.17889212613344796 -0.1788309248122033 -0.1787664365504611\n"
	"0.8214236377771371 0.8214011055147381 0.8213820429522443 0.8213664604998527 0.8213543497191864 0.8213457021718611 0.8213405094194925 0.8213387630236184 0.82134045454589 0.8213455755478805 0.8213541175912127 0.8213660722374883 0.8213814310482803 0.8214001855851976 0.8214223274098771 0.8214478480838707 0.8214767391688014 0.8215089922262777 0.82154459881788 0.8215835505052453 0.8216258388499398 0.8216714554135578 0.8217203917577436 0.8217726394440348 0.8218281900340756 0.8218870350894889 0.8219491661718337\n"
	"1.8221935555829276 1.8221686992083121 1.8221472912335486 1.8221293619556107 1.8221149029564074 1.822103905817869 1.8220963621218687 1.8220922634502514 1.8220916013849546 1.8220943675078516 1.8221005534008299 1.8221101506457913 1.8221231508246234 1.8221395455191995 1.8221593263114286 1.8221824847831982 1.8222090125163817 1.8222389010928879 1.8222721420946044 1.8223087271034402 1.822348647701233 1.82239189546992 1.822438461991382 1.8224883388474566 1.8225415176201167 1.8225979898912144 1.822657747242637\n"
	"2.8229568980363524 2.8229297019694215 2.8229059329643604 2.8228856412049126 2.8228688182935073 2.822855455832574 2.822845545424485 2.8228390786716417 2.8228360471764518 2.822836442541302 2.8228402563686004 2.8228474802607835 2.822858105820181 2.822872124649244 2.822889528350366 2.822910308525941 2.822934456778377 2.8229619647100677 2.822992823923414 2.8230270260208243 2.8230645626046993 2.8231054252774115 2.8231496056414116 2.8231970952990366 2.8232478858527514 2.8233019689049286 2.823359336057976\n"
	"3.823713692425464 3.823684141163959 3.8236579955887393 3.8236353257702547 3.823616123331668 3.8236003798961278 3.823588087086762 3.823579236526669 3.823573819838998 3.8235718286468767 3.8235732545734393 3.8235780892418276 3.823586324275155 3.8235979512965486 3.8236129619291503 3.8236313477960877 3.823653100520488 3.8236782117255004 3.8237066730342306 3.8237384760698347 3.823773612455412 3.8238120738141035 3.8238538517690586 3.823898937943376 3.823947323960219 3.823999001442722 3.8240539620139913\n"
	"4.824463966038316 4.824432044157888 4.824403506550809 4.82437844317419 4.824356845672135 4.824338705688753 4.824324014868111 4.824312764854248 4.8243049472912745 4.824300553823257 4.824299576094269 4.824302005748422 4.824307834429739 4.824317053782337 4.824329655450271 4.824345631077634 4.824364972308494 4.8243876707869475 4.824413718157054 4.824443106062894 4.82447582614855 4.824511870058082 4.824551229435592 4.824593895925126 4.824639861170802 4.824689116816678 4.824741654506838\n"
	"5.825207746162889 5.825173438317087 5.825142493294599 5.8251150209391795 5.825091012916083 5.825070460890565 5.8250533565278815 5.825039691493224 5.825029457451862 5.82502264606903 5.825019249009955 5.825019257939907 5.8250226645240915 5.825029460427764 5.825039637316152 5.825053186854518 5.825070100708075 5.825090370542085 5.825113988021776 5.8251409448123965 5.825171232579173 5.825204842987333 5.825241767702174 5.825281998388839 5.825325526712653 5.825372344338831 5.825422442932613\n"
	"6.825945060087136 6.825908351007392 6.825874983264107 6.825845086587648 6.825818652664616 6.825795673181666 6.8257761398254075 6.8257600442824184 6.825747378239335 6.825738133382764 6.825732301399327 6.825729873975661 6.825730842798322 6.825735199553961 6.825742935929192 6.8257540436106225 6.825768514284881 6.825786339638562 6.825807511358285 6.8258320211306795 6.825859860642332 6.825891021579871 6.8259254956299245 6.825963274479051 6.826004349813942 6.826048713321178 6.826096356687366\n"
	"7.8266759350991535 7.826636809594774 7.826601003903491 7.826568667642157 7.826539792519014 7.826514370242272 7.826492392520123 7.826473851060754 7.8264587375723735 7.82644704376316 7.826438761341336 7.826433882015124 7.826432397492667 7.8264342994821945 7.8264395796919075 7.8264482298299995 7.8264602416046785 7.826475606724131 7.8264943168965715 7.826516363830201 7.8265417392331855 7.82657043481376 7.826602442280134 7.826637753340435 7.826676359702937 7.826718253075839 7.826763425167314\n"
	"8.827400398486894 8.827358841445076 8.82732058265671 8.827285791625144 8.827254460080397 8.827226579752477 8.827202142371377 8.827181139667054 8.827163563369524 8.827149405208786 8.827138656914826 8.827131310217666 8.827127356847242 8.82712678853359 8.827129597006696 8.827135773996545 8.827145311233132 8.827158200446462 8.827174433366508 8.8271940017233 8.827216897246807 8.82724311166701 8.827272636713921 8.827305464117515 8.827341585607812 8.827380992914811 8.82742367776848\n"
	"9.828118477538396 9.828074473924225 9.828033746967883 9.827996486059142 9.827962682949988 9.82793232939246 9.827905417138552 9.827881937940205 9.827861883549467 9.827845245718308 9.827832016198705 9.827822186742715 9.827815749102243 9.827812695029358 9.82781301627601 9.82781670459422 9.827823751735963 9.827834149453253 9.827847889498067 9.827864963622424 9.827885363578282 9.827909081117653 9.82793610799255 9.827966435954913 9.828000056756792 9.828036962150172 9.82807714388705\n"
	"10.828830199541656 10.828783734398144 10.82874052428106 10.828700778466597 10.828664488728968 10.828631646842375 10.82860224458102 10.828576273719086 10.82855372603077 10.828534593290307 10.828518867271846 10.82850653974964 10.82849760249784 10.82849204729066 10.82848986590232 10.828491050106983 10.828495591678895 10.828503482392208 10.828514714021168 10.828529278339943 10.828547167122728 10.82856837214375 10.828592885177194 10.828620697997216 10.82865180237809 10.828686190093975 10.828723852919097\n"
	"11.829535591784683 11.829486650232681 11.829440942040286 11.82939869637002 11.829359905018492 11.829324559782343 11.829292652458172 11.829264174842535 11.82923911873209 11.829217475923414 11.829199238213128 11.829184397397867 11.829172945274173 11.829164873638696 11.829160174288049 11.829158839018802 11.829160859627613 11.829166227911045 11.829174935665726 11.829186974688248 11.829202336775253 11.829221013723298 11.829242997329025 11.829268279388991 11.829296851699894 11.82932870605827 11.829363834260754\n"
	"12.830234681555481 12.83018324879373 12.8301350276896 12.83009026729188 12.830048959419763 12.830011095892509 12.82997666852934 12.829945669149417 12.829918089571976 12.829893921616247 12.829873157101424 12.82985578784676 12.829841805671407 12.82983120239463 12.829823969835623 12.82982009981361 12.829819584147792 12.8298224146574 12.829828583161643 12.829838081479735 12.829850901430888 12.829867034834308 12.82988647350924 12.829909209274838 12.829935233950394 12.829964539355068 12.829997117308103\n"
	"13.830927496142095 13.830873557447227 13.830822808673119 13.830775518754692 13.83073167953399 13.830691282853067 13.830654320553954 13.830620784478619 13.83059066646912 13.830563958367456 13.83054065201565 13.830520739255775 13.830504211929764 13.830491061879677 13.830481280947552 13.830474860975386 13.830471793805216 13.830472071279047 13.830475685238909 13.830482627526827 13.830492889984818 13.830506464454878 13.830523342779074 13.830543516799366 13.830566978357837 13.83059371929648 13.830623731457322\n"
	"14.831614062832486 14.831557603559062 14.831504312434816 14.83145447828089 14.831408092962313 14.831365148344126 14.831325636291346 14.831289548668998 14.83125687734207 14.831227614175617 14.831201751034662 14.831179279784251 14.831160192289339 14.831144480414984 14.831132136026213 14.831123150988056 14.831117517165502 14.83111522642362 14.831116270627412 14.831120641641874 14.831128331332067 14.83113933156298 14.83115363419968 14.831171231107113 14.83119211415039 14.831216275194507 14.831243706104445\n"
	"15.832294408914677 15.83223541449511 15.832179566418802 15.832127173393012 15.832078227305914 15.832032720045824 15.831990643500916 15.831951989559393 15.831916750109471 15.831884917039389 15.831856482237349 15.831831437591596 15.831809774990312 15.831791486321734 15.831776563474072 15.831764998335565 15.831756782794415 15.831751908738838 15.831750368057051 15.831752152637307 15.831757254367766 15.831765665136672 15.831777376832257 15.831792381342709 15.831810670556294 15.83183223636118 15.831857070645654\n"
	"16.832968561676687 16.83290701762128 16.832848598069127 16.832793631613498 16.832742110166024 16.83269402563834 16.832649369942033 16.832608134988682 16.83257031268994 16.83253589495736 16.83250487370259 16.832477240837235 16.832452988272863 16.83243210792113 16.8324145916936 16.832400431501902 16.832389619257626 16.832382146872384 16.832378006257805 16.832377189325477 16.832379687986993 16.832385494153975 16.832394599738038 16.832406996650725 16.832422676803724 16.832441632108612 16.832463854477005\n"
	"17.833636548406517 17.83357244030349 17.83351143482983 17.83345388046488 17.833399769143796 17.833349092801818 17.833301843374073 17.833258012795746 17.83321759300206 17.833180575928168 17.833146953509278 17.833116717680568 17.83308986037718 17.83306637353433 17.833046249087218 17.83302947897097 17.833016055120844 17.833005969471998 17.83299921395959 17.83299578051882 17.83299566108488 17.832998847592904 17.833005331978157 17.833015106175765 17.833028162120918 17.83304449174883 17.833064086994646\n"
	"18.834298396392164 18.834231709907613 18.834168104145007 18.834107947469626 18.834051231840412 18.833997949216368 18.833948091556408 18.83390165081947 18.83385861896449 18.83381898795045 18.83378274973628 18.833749896280963 18.83372041954339 18.83369431148254 18.833671564057347 18.83365216922681 18.833636118949812 18.833623405185328 18.83361401989233 18.833607955029713 18.833605202556477 18.83360575443156 18.833609602613883 18.8336167390624 18.833627155736075 18.833640844593866 18.83365779759471\n"
	"19.83495413292171 19.834884853799558 19.834818633458696 19.834755860150224 19.834696525857098 19.834640622562198 19.834588142248435 19.834539076898672 19.834493418495867 19.834451159022827 19.83441229046253 19.834376804797856 19.834344694011705 19.834315950086953 19.83429056500654 19.834268530753313 19.834249839310218 19.834234482660122 19.83422245278596 19.834213741670595 19.834208341296943 19.834206243647913 19.834207440706365 19.834211924455225 19.834219686877404 19.834230719955798 19.83424501567329\n"
	"20.83560378528304 20.8355318993452 20.83546305021492 20.83539764602915 20.835335678794962 20.835277140519402 20.835222023209496 20.83517031887223 20.8351220195147 20.83507711714389 20.83503560376682 20.83499747139063 20.834962712022232 20.83493131766872 20.8349032803371 20.83487859203442 20.83485724476771 20.834839230544006 20.83482454137036 20.834813169253792 20.83480510620131 20.83480034421995 20.834798875316807 20.834800691498806 20.83480578477309 20.834814147146638 20.83482577062648\n"
    ;

void run_support_point_projection_unit_tests( TestState& state ) 
{
    std::stringstream file( the_test_file );
    SupportPointProjection foo( 
        camera::pixel / (17E-9 * si::meter),
        camera::pixel / (23E-9 * si::meter),
        camera::pixel / (10E-9 * si::meter),
        camera::pixel / (10E-9 * si::meter),
        file );

    Projection::SamplePosition zero = foo.pixel_in_sample_space( 
        Projection::ImagePosition::Constant(0 * camera::pixel) );
    state( std::abs( zero.x().value() + 0.56763828810267 * 10E-9 ) < 1E-10,
        "X projection is zeroed correctly" );
    state( std::abs( zero.y().value() + 7.184975691913245 * 10E-9 ) < 1E-10,
        "Y projection is zeroed correctly" );

    Projection::ImagePosition middle; middle << 13 * camera::pixel, 9 * camera::pixel;
    Projection::SamplePosition middle_sample = foo.pixel_in_sample_space( middle ), middle_norm;
    middle_norm << 2.15457E-7f * si::meter, 1.35303E-7f * si::meter;
    state( value(middle_sample - middle_norm).norm() < 1E-10 );

    Projection::SubpixelImagePosition interpolated = middle.cast< Projection::SubpixelImagePosition::Scalar >();
    interpolated.x() -= 0.1f * camera::pixel;
    interpolated.y() += 0.2f * camera::pixel;
    Projection::SamplePosition interpolated_sample = foo.point_in_sample_space( interpolated ), interpolated_norm;
    interpolated_norm << 2.13765e-07f * si::meter, 1.39906e-07f * si::meter;
    state( value(interpolated_sample - interpolated_norm).norm() < 1E-10,
           "Interpolated point is transformed correctly" );

    state( foo.nearest_point_in_image_space( interpolated_sample ) == middle,
           "Reverse transform works" );

    Projection::SamplePosition center;
    center << 90E-9f * si::meter, 10E-9f * si::meter;
    Projection::ROISpecification roi( center, Projection::SamplePosition::Constant( 65 * si::meter ) );
    state( foo.cut_region_of_interest_naively(roi).size() == foo.cut_region_of_interest(roi).size(),
           "Naively and cleverly selected ROIs match in size");
}

}
}
